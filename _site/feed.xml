<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-07T21:43:41-05:00</updated><id>http://localhost:4000/</id><title type="html">Samantha John</title><subtitle>Cofounder of Hopscotch.</subtitle><entry><title type="html">Some thoughts on mastery for a young programmer</title><link href="http://localhost:4000/programming/2018/02/11/some-thoughts-on-mastery-for-a-young-programmer.html" rel="alternate" type="text/html" title="Some thoughts on mastery for a young programmer" /><published>2018-02-11T13:11:00-05:00</published><updated>2018-02-11T13:11:00-05:00</updated><id>http://localhost:4000/programming/2018/02/11/some-thoughts-on-mastery-for-a-young-programmer</id><content type="html" xml:base="http://localhost:4000/programming/2018/02/11/some-thoughts-on-mastery-for-a-young-programmer.html">&lt;p&gt;I recently met Ivan, a high schooler who is interested in both programming and self-improvement — two of my favorite topics. He taught himself to program and created several iPhone apps. He wanted to improve his programming skills but was feeling stuck. He eagerly listed the technologies he had mastered, but wasn’t sure what he should tackle next.&lt;/p&gt;

&lt;p&gt;He also asked question that I’ve heard many times before: Is it better to go in depth on one programming language or learn a whole bunch of them? I wasn’t very articulate in answering him then, but the question stuck in my mind. Here’s what I wish I’d said.&lt;/p&gt;

&lt;p&gt;The sure sign of a beginner programmer is that you measure progress in quantity of frameworks, technologies and APIs learned. You’re always wondering which stack to learn next. At this stage, you get stuck as you continually learn new things but their utility remains unclear.&lt;/p&gt;

&lt;p&gt;The next step is when you focus on one programming language and grok it deeply. You’re informed about the choices and tradeoffs the designer made. You know what abstractions you can use. You also understand how the language patterns influence the form and type of programs you write. Now you’re ready to build a career in software.&lt;/p&gt;

&lt;p&gt;An expert, however, must circle back to the novice’s quest. You find new theories, languages and frameworks, and incorporate them into your worldview. This time, armed with a depth of knowledge, you compare and contrast different ways of accomplishing your goals. You gain an arsenal of tools for thinking. You can change your frame of reference to find simple solutions to old questions and discover new classes of problems altogether.&lt;/p&gt;

&lt;p&gt;The great thing is, you can replace “programming” above with any field and it still holds. In his Nobel Prize speech, Richard Feynman discusses the importance of knowing many different perspectives. Some of his greatest contributions to science came when he used the math from one area of physics to drastically simplify problems in another. In the words of Alan Kay:&lt;/p&gt;

&lt;p&gt;“A change of perspective is worth 80 IQ points.”
I’m going to send this to Ivan, but I hope this will be useful to others as well. To achieve proficiency you need to learn one way of thinking well. True expertise comes when you can view your field from multiple angles. It’s easier said than done. Good luck Ivan!&lt;/p&gt;</content><author><name></name></author><summary type="html">I recently met Ivan, a high schooler who is interested in both programming and self-improvement — two of my favorite topics. He taught himself to program and created several iPhone apps. He wanted to improve his programming skills but was feeling stuck. He eagerly listed the technologies he had mastered, but wasn’t sure what he should tackle next.</summary></entry><entry><title type="html">My mom, the scientist</title><link href="http://localhost:4000/2013/05/01/mothers-day.html" rel="alternate" type="text/html" title="My mom, the scientist" /><published>2013-05-01T13:48:00-04:00</published><updated>2013-05-01T13:48:00-04:00</updated><id>http://localhost:4000/2013/05/01/mothers-day</id><content type="html" xml:base="http://localhost:4000/2013/05/01/mothers-day.html">&lt;p&gt;When we were kids, my brother and I knew that our mom was the scientist of the family. She had finished the better part of a PhD in chemistry before deciding to become a doctor. She also the one who knew how to fix things. From busted remotes to leaky faucets to putting together new toys, she always had the solution.&lt;/p&gt;

&lt;p&gt;My favorite story about my mom is a family legend. When she was 12 she left China to immigrate to Hong Kong with her mother. At the border the officer informed her that my mom was too old to leave China without a visa. Thinking quickly, my grandmother said: “Oh, she’s actually still 11, her birthday’s next month and we just call her 12 because she’s so close.” That was how my mom left China and got to have two birthdays.&lt;/p&gt;

&lt;p&gt;I grew up thinking that mothers were good at math and science. They had to be clever and think on their feet. They held high powered jobs to support their families. That has been a huge influence on me throughout my life–I knew that I had to be all of these things so that I could be like my mom.&lt;/p&gt;

&lt;p&gt;At my company Hopscotch we spend a lot of time thinking about how to get more girls interested in STEM fields. Part of the problem is a lack of female role models in these disciplines. First at engineering school and later while working as a programmer I found myself in a predominantly male landscape. For most kids, the scientist parent is their father. I realize now how lucky I was to have my mother as a role model.&lt;/p&gt;</content><author><name></name></author><summary type="html">When we were kids, my brother and I knew that our mom was the scientist of the family. She had finished the better part of a PhD in chemistry before deciding to become a doctor. She also the one who knew how to fix things. From busted remotes to leaky faucets to putting together new toys, she always had the solution.</summary></entry></feed>